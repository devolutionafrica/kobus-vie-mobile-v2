const paymentConfig = {
    externalId: "",
    username: "uname",
    formId: "",
    paymentUrl: "",
    btnsContainerId: "",
    btnClass: "",
    btnInlineStyleClass: "",
    methods: [
      "orange-money-ecommerce-payment-service-feature",
      "mtn-mobile-money-ecommerce-payment-service-feature",
      "express-union-mobile-money-ecommerce-payment-service-feature",
      "uba-m2u-ecommerce-payment-service-feature",
      "card-ecommerce-payment-service-feature",
      "paypal-ecommerce-payment-service-feature",
    ],
  },
  requiredConfig = {
    username: "uname",
    formId: "payment form id attribute",
    paymentUrl: "payment url",
    btnsContainerId: "payment buttons container id attribute",
  },
  serviceConfig = {
    "orange-money-ecommerce-payment-service-feature": {
      service: "orange-money-ecommerce-payment-service-feature",
      logo: "https://www.afrikpay.com/assets/img/partners/om.png",
      fields: [{ label: "referenceNumber", required: !0 }],
      type: "mobile-money-payment",
    },
    "mtn-mobile-money-ecommerce-payment-service-feature": {
      service: "mtn-mobile-money-ecommerce-payment-service-feature",
      logo: "https://www.afrikpay.com/assets/img/partners/momo.png",
      fields: [{ label: "referenceNumber", required: !0 }],
      type: "mobile-money-payment",
    },
    "express-union-mobile-money-ecommerce-payment-service-feature": {
      service: "express-union-mobile-money-ecommerce-payment-service-feature",
      logo: "https://www.afrikpay.com/assets/img/partners/eum_new.png",
      fields: [{ label: "referenceNumber", required: !0 }],
      type: "mobile-money-payment",
    },
    "uba-m2u-ecommerce-payment-service-feature": {
      service: "uba-m2u-ecommerce-payment-service-feature",
      logo: "https://www.afrikpay.com/assets/img/partners/uba.png",
      fields: [{ label: "referenceNumber", required: !0 }],
      type: "mobile-money-payment",
    },
    "card-ecommerce-payment-service-feature": {
      service: "card-ecommerce-payment-service-feature",
      logo: "https://www.afrikpay.com/assets/img/partners/visa.png",
      fields: [
        { label: "data[firstName]", required: !0 },
        { label: "data[lastName]", required: !0 },
        { label: "data[addressLine1]", required: !0 },
        { label: "data[addressCity]", required: !0 },
        { label: "data[addressState]", required: !1 },
        { label: "data[addressPostalCode]", required: !1 },
      ],
      type: "card-payment",
    },
    "paypal-ecommerce-payment-service-feature": {
      service: "paypal-ecommerce-payment-service-feature",
      logo: "https://www.afrikpay.com/assets/img/partners/paypal.png",
      fields: [],
      type: "card-payment",
    },
  };

function renderPaymentBtns(e = paymentConfig) {
  const {
    externalId: t,
    username: r,
    formId: n,
    paymentUrl: a,
    btnClass: o,
    btnInlineStyleClass: i,
    btnsContainerId: m,
    methods: s,
  } = e;
  for (const t in requiredConfig)
    if (!e[t])
      return (
        alert(`Bad Payment configuration : ${requiredConfig[t]} is required`),
        !1
      );
  const c = document.getElementById(n);
  if (!c)
    return (
      alert(`HTML Form Element with id #${n} doesn't exist in the DOM`), !1
    );
  const u = document.getElementById(m);
  if (!u)
    return (
      alert(
        `HTML Element (buttons container) with id #${m} doesn't exist in the DOM`
      ),
      !1
    );
  try {
    new URL(a);
  } catch (e) {
    return alert("The payment url is not valid"), !1;
  }
  const l = "afrikpay-service";
  createHiddenInput(
    [
      { name: "_username", value: r },
      { name: "externalId", value: t ?? new Date().getTime() },
      { name: "service", value: "", id: l },
      // { name: "amount", value: "200", id: l },
    ],
    c
  );
  const d = s && s.length > 0 ? s : paymentConfig.methods;
  for (let e = 0; e < d.length; e++) {
    const t = createBtn(d[e], o);

    u.appendChild(t);
    const r = getCSSRulesForClass(i);
    (t.style = `${r} ${t.style.cssText}`),
      t.addEventListener("click", function (e) {
        e.preventDefault(),
          (document.getElementById(l).value = t.value),
          pay(a, c);
      });
  }
  return !0;
}
function createBtn(e, t) {
  const r = document.createElement("button");
  return (
    (r.value = serviceConfig[e].service),
    (r.type = "submit"),
    (r.className = t || null),
    (r.style = ` margin: 10px;height:70px;width:70px;border-radius:70px;background: url(${serviceConfig[e].logo});background-size: cover;background-repeat: no-repeat;background-position: center center; border : none;`),
    r
  );
}
function createHiddenInput(e, t) {
  for (const r of e) {
    (input = document.createElement("input")), (input.type = "hidden");
    for (const e in r) input[e] = r[e];
    t.appendChild(input);
  }
}
function getCSSRulesForClass(e) {
  if (!e) return console.log("inline style is empty"), "";
  const t = `.${e}`;
  for (const e of document.styleSheets)
    try {
      const r = e.cssRules || e.rules;
      for (const e of r) if (e.selectorText === t) return e.style.cssText;
    } catch (e) {}
  return "";
}
function pay(e, t) {
  if (
    ((t.method = "post"),
    (t.action = e),
    checkingForm(document.forms[t.id].service.value, t.id))
  ) {
    const e = new Event("submit");
    t.dispatchEvent(e) && t.submit();
  }
}
function checkingForm(e, t) {
  const r = document.querySelector(`form#${t} [name='amount']`);
  if (!r) return alert("Bad form : the field amount is required"), !1;
  if (!r.value.match(/^[0-9]+$/))
    return (
      alert("Bad form : the field amount must be type number"), r.focus(), !1
    );
  for (const r of serviceConfig[e].fields) {
    if (!r.required) continue;
    const e = document.querySelector(`form#${t} [name='${r.label}']`);
    if (!e)
      return (
        alert(`Bad form : the field ${r.label} is required for this operation`),
        !1
      );
    if (!e.value)
      return (
        alert("Bad form : The focused field is required for this operation"),
        e.focus(),
        !1
      );
  }
  return !0;
}
